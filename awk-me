---
tags: [shell, awk]
---
# condition print
awk -F "," '{if (NF==6) print "39 00 04",$2,$4,$5,$6; else if (NF==4) print "15 00 02",$2,$4; else if (NF==3) print "05 00 01",$2; else print $0}' ili9881-1.txt > ili9881-3.txt
awk -F "," '{if (NF==6) printf "39 00 04 %s %s %s %s\n",$2,$4,$5,$6; else if (NF==4) printf "15 00 02 %s %s\n",$2,$4; else if (NF==3) printf "05 00 01 %s\n",$2; else print $0}' ili9881-1.txt > ili9881-4.txt

# delete comment, grep multi keyword, extract field and condition print
sed -e 's@//.*@@g' lcd.txt |grep -E 'Generic|DCS|Delay' |awk -F "[()]" '{print $2}' |awk -F "," '{if (NF==2) print "15 00 02",$1,$2; else print "05 00 01",$1}' > lcd-out.txt

# show sub-diretory and concat to a line
echo `ls -l |awk '/^d/ {print $NF}'`

# awk substr function
grep ^{ jd9365.txt |awk -F "[{}]" '{print $2,$3}' |awk -F ',' '{print "15 00 02",substr($1,3,2), substr($3,4,2)}' > jd9365-result.txt

# .dts to .dtbo
ls -l *.dts |awk '{print $NF}' |sort |sed -e 's/.dts/.dtbo\ \\/g'

# find two consecutive lines that contains same keyword
awk -v keyword="motor_thread_handle" 'NR==1 {if ($0 ~ keyword) prev=1; else prev=0} NR>1 {if ($0 ~ keyword && prev==1) print NR-1, NR ": " $0; prev=($0 ~ keyword)}' kernel.log

# find consecutive duplicate lines
awk 'NR==1 {prev=$0} NR>1 {if ($0==prev) print "Duplicate lines found:" NR-1, NR; prev=$0}' yourfile.txt

# 文件中以每3行为一组，每组中每一行分别提取出一个3位数字，统计所有组中所有组合的数量
# 将文件中的内容以每三行一组进行处理。
# 从每行提取一个三位数字。
# 记录每组三位数字的组合，并统计所有组合的数量。
awk '{ match($0, /[0-9]{3}/, arr); group[NR % 3] = arr[0]; # NR % 3 分别将每组三行存储在 group[0], group[1], group[2] 中
    # 处理每组三行后的操作
    if (NR % 3 == 0) { combo = group[1] "-" group[2] "-" group[0]; count[combo]++;  # 记录每种组合的数量 }
} END { for (combo in count) { print combo ": " count[combo] } } ' input.txt

# 删除dmesg.log开头的[]及其内容
# ^：匹配行首。
# \[ 和 \]：匹配中括号字符 [ 和 ]。
# [^]]*：匹配 [ 和 ] 之间的任意字符，直到遇到第一个 ]。
# //：将匹配的部分替换为空字符串，从而删除行首的 [] 及其中内容。
sed 's/^\[[^]]*\] //' dmesg.log

# atrace categories
atrace --list_categories |awk '{print "atrace_categories: \""$1"\""}'

# 交换前2个字段，并将首个字段+1，按16进制显示，并按字段数量分别添加不现的前缀
cat JD9165-2.txt | sed 's/[{ }]//g; s/,/ /g' | awk '{ tmp=$1; $1=$2; $2=tmp } 1' | awk '{num = $1 + 1; first_hex = sprintf("0x%x",num); $1 = first_hex; if (NF==2) prefix = "05 00 "; else if(NF==3) prefix = "15 00 "; else if(NF>3) prefix = "39 00 "; print prefix $0}' > JD9165-3.txt

# 找出docker镜像名，名称和版本都none的镜像并删除
docker images | awk '$1 ~ /none/, $2 ~ /none/ {print $3}' |xargs -i docker rmi {}

# 删除所有容器
docker ps -a |awk '{print $1}' |sed '1d' |xargs -i docker rm -f {}

# 比较新旧项目文件，找出新加项目，并生成manifest文件片断
diff -u project-{old,new}.txt |rg '^\+' |rg -v '\+\+' |sed  -e 's/\+//g' | awk -F ' : ' '{print "<project name=\""$2"\" path=\""$2"\" />"}'
